#! /bin/bash

source lemptool_scripts

#-------------------Utility help-----------------------------------------#

show_help() {
  echo ""
  echo "Usage:"
  echo ""
  echo "lemptool [--option1 --option2 -y ...] [--param1=value1_2 value2_2 --param2=value2_1  ...]"
  echo ""
  echo "Option arguments are value less, instead with param arguments you can pass"
  echo "string values after the (=) sing."
  echo ""
  echo "Arguments:"
  echo ""
  echo " -i,              --install  Proceed to setup repo and install:"
  echo "                             nginx + php + mariadb + extra-laravel-development"
  echo "                             deb packages. "
  echo ""
  echo "                         -y  You can pass this option to skip all the confirmation"
  echo "                             messages, is valid for all th below commands/options"
  echo " -pki=   --package-install=  Installs os packages."
  echo "                             Usage example:  "
  echo "                                 $ ./lemptool -pki=htop nodejs git"
  echo ""
  echo " -ng        --nginx-install  Installs Nginx server."
  echo ""
  echo " -mdb     --mariadb-install  Installs Mariadb version 10.6."
  echo ""
  echo "   --mariadb-user-db-create  Creates a new Mariadb user and a new db with the same"
  echo "                             name as user, also grant all rights to that user on"
  echo "                             the newly created database."
  echo "                             It needs a user and a password as parameters."
  echo "                             Usage example:"
  echo "                              $ ./lemptool --mariadb-user-db-create=user password host"
  echo ""
  echo " --mariadb-superuser-create  Creates a new Mariadb superuser. and gran all rights"
  echo "                             Usage example:"
  echo "                              $ ./lemptool --mariadb-superuser-create=user password host"
  echo ""
  echo " -p=         --php-install=  Installs a php version on system together with "
  echo "                             dependencies for laravel development,it also"
  echo "                             installs composer."
  echo "                             When used the php version must be passed"
  echo "                             as param value."
  echo "                             Usage example:"
  echo "                                 $ ./lemptool -p=8.0"
  echo ""
  echo " -fpm=    --php-fpm-create=  Creates a new php fpm pool, using a template,"
  echo "                             it need a valid os user name as a param value."
  echo "                             Usage example:  "
  echo "                                 $ ./lemptool -fpm=myusername"
  echo ""
  echo "     --fpm-ng-server-create  Creates a new (laravel in mind), nginx server unit"
  echo "                             together with a existing valid fpm pool, a domain" 
  echo "                             and local public files path to serve  as params."
  echo "                             Usage example:"
  echo '                             $ ./lemptool --fpm-ng-server-create="fpm-name" "domain" "/public/path"'
  echo ""
  echo " -lemp                       It takes a  OS user create a folder at /var/www/ with the name of "
  echo "                             that user, it solflink it from user home folder and create and" 
  echo "                             runs  --fpm-ng-server-create and --mariadb-user-db-create"
  echo "                             Usage example:"
  echo '                             $ ./lemptool lemp="username" "domain" "dbpassword"'
  echo ""
  echo "       --phpmyadmin-install  Installs phpmyadmin from official source."
  echo "                             It does so using fpm, so it create a php-fpm with"
  echo "                             a os 'phpmyadmin' user, also it create an nginx server "
  echo ""
  return 0
}

#-------------------Arguments Handling-----------------------------------------#

clear_state() {
  CURRENT_SCRIPT=""
  SCRIPT_ARGUMENTS=""
}



run_current_script(){
#  echo "script to run"
#  echo "$CURRENT_SCRIPT"
#  echo "arguments"
#  echo "$SCRIPT_ARGUMENTS"
  

  show_confirmations=1
  for i in $SCRIPT_ARGUMENTS; do
    if [ $i == "-y" ];then 
      show_confirmations=0
    fi
  done


  str="$SCRIPT_ARGUMENTS"
  oldstr=" -y"
  newstr=" "
  _y_replaced=$(echo $str | sed "s/$oldstr/$newstr/g")
  str="$_y_replaced"
  oldstr="-y "
  y__replaced=$(echo $str | sed "s/$oldstr/$newstr/g")
  SCRIPT_ARGUMENTS_NO_Y=$y__replaced

  if ! $CURRENT_SCRIPT $SCRIPT_ARGUMENTS_NO_Y ; then
    echo "Error running script $CURRENT_SCRIPT"
    echo ""
    show_help
  fi
}

add_argument(){
  SCRIPT_ARGUMENTS="$SCRIPT_ARGUMENTS  $1"
}

add_script() {

    if [ -n "$CURRENT_SCRIPT" ]; then
      run_current_script
      SCRIPT_ARGUMENTS=""
    fi
    CURRENT_SCRIPT="$1"
}






if [ -z "$*" ]; then
  echo "No arguments, you must pass at least one option or param"
  show_help
fi
clear_state
for i in "$@"; do
  case $i in
  -help | --help)
    clear_state
    show_help
    exit $?
    shift # past argument=value
    ;;
  -i* | --install*)

    install_mariadb -y
    install_nginx -y
    install_php 8.1 -y

    shift # past arg
    ;;
  -pki=* | --package-install=*)
    add_script "packages_installer"
    add_argument "${i#*=}"
    shift # past arg
    ;;

  -ng* | --nginx-install*)
    add_script "install_nginx"
    add_argument "${i#*=}"
    shift # past arg
    ;;
  -mdb* | --mariadb-install*)
    add_script "install_mariadb"
    #add_argument "${i#*=}"

    shift # past arg
    ;;
  --mariadb-user-db-create=*)
    add_script "add_mdb_user_with_db"
    add_argument "${i#*=}"
    shift # past arg
    ;;
  --mariadb-superuser-create=*)
    add_script "add_mdb_superuser"
    add_argument "${i#*=}"
    shift # past arg
    ;;
  -p=* | --php-install=*)
    add_script "install_php"
    add_argument "${i#*=}"
    shift # past arg
    ;;
  -fpm=* | --fpm-create=*)

    add_script "fpm_create"
    add_argument "${i#*=}"
    shift # past arg
    ;;
  --fpm-ng-server-create=*)
    add_script "fpm_ng_server_create"
    add_argument "${i#*=}"
    shift # past arg
    ;;
  -lemp=*)
    add_script "lemp_create"
    add_argument "${i#*=}"
    shift # past arg
    ;;
  --phpmyadmin-install*)
    install_phpmyadmin

    shift # past arg
    ;;

  *)
    add_argument "${i#*}"

    ;;
  esac
done
run_current_script

#! /bin/bash

# shellcheck source=scripts/deb_os_tools
source scripts/deb_os_tools



restart_php() {
  validate_php_version "$1"
  echo "Restarting php fpm..."
  sudo systemctl restart php"$PHP_VERSION"-fpm
}

validate_mariadb(){
  if ! command -v mysql &> /dev/null; then
    echo "Mariadb is not installed, please install it first."
    echo "You can install it with:"
    echo " $ ./lemptool -mdb"
    exit 1
  fi
}

validate_php(){
  if ! command -v php &> /dev/null; then
    echo "PHP is not installed, please install it first."
    echo "You can install it with:"
    echo " $ ./lemptool -p=<php-version>"
    exit 1
  fi
}

validate_nginx(){
  if ! command -v nginx &> /dev/null; then
    echo "Nginx is not installed, please install it first."
    echo "You can install it with:"
    echo " $ ./lemptool -ng"
    exit 1
  fi
}


php_version_number(){
  php -r "echo PHP_MAJOR_VERSION.'.'.PHP_MINOR_VERSION;"
}

php_config_path(){
  PHP_VERSION="$(php_version_number)"
  echo   "/etc/php/$PHP_VERSION"
}


check_for_y(){
  confirmation=0
  for i in "$@"; do
    if [ $i == "-y" ];then 
      confirmation=1
    fi
  done


  return $confirmation

}




install_extra_packages_for_laravel_dev() {

  validate_sudo
  extra_packages=("git" "sqlite3" "nodejs" "npm")

  packages_installer -y "${extra_packages[@]}"
}

validate_php_version() {
  valid_php_versions=("8.1" "8.0" "7.4" "7.3")
  PROSPECT_VERSION=$1
  export VALUE_SELECTED_FROM_ARGS
  if [[ -n $PROSPECT_VERSION ]]; then
    echo "Checking if php version $PROSPECT_VERSION is among the valid ones for this script to use."
    . ./scripts/bash_helpers/in_arguments "$PROSPECT_VERSION" "${valid_php_versions[@]}"
  else
    echo "You must pick a valid php version for this script to use"
    . ./scripts/bash_helpers/in_arguments "x.x" "${valid_php_versions[@]}"
  fi
  export PHP_VERSION=$VALUE_SELECTED_FROM_ARGS
}


#---------------PHP INSTALL-------------------
install_php() {

  validate_sudo
  validate_php_version "$1"
  echo "> message:"
  echo "If not set, this script will install the deb.sury.org php repo."
  echo "It will also install PHP $PHP_VERSION together with FastCGI and a some php libraries commonly used on lavarel development."

  if [ $show_confirmations -eq 1 ]; then
    confirmation_message
  else
    echo "> message:"
    echo "Confirmation avoided !"
  fi 
  install_deb_repo_packages
  validate_distro_name "Ubuntu" "Debian"

  if [[ $CURRENT_DISTRO_NAME == Ubuntu ]]; then
    PPA_UBUNTU_REPO="ondrej/php"
    
    if ! validate_installed_repo $PPA_UBUNTU_REPO; then
      echo "> message:"
      echo "The $PPA_UBUNTU_REPO repository was not detected in this os."
      echo "Adding $PPA_UBUNTU_REPO ppa repository"
      if [ $show_confirmations -eq 1 ]; then
        sudo add-apt-repository ppa:ondrej/php
      else
        sudo add-apt-repository ppa:ondrej/php -y
      fi

    else
      echo "> message:"
      echo "The $PPA_UBUNTU_REPO repository is already installed."

    fi
  fi
  if [[ $CURRENT_DISTRO_NAME == Debian ]]; then
    DEBIAN_REPO="https://packages.sury.org/php/ $(lsb_release -sc) main"
    validate_installed_repo "$DEBIAN_REPO"
    if ! validate_installed_repo "$DEBIAN_REPO"; then
      echo "> message:"
      echo "Adding the $DEBIAN_REPO repository"
      GPG_URL=https://packages.sury.org/php/apt.gpg
      GPG_KEY_PATH="/etc/apt/trusted.gpg.d/sury-php-keyring.gpg"
      UNSIGNED_REPO="deb $DEBIAN_REPO "
      echo "$UNSIGNED_REPO" | sudo tee /etc/apt/sources.list.d/sury-php.list
      curl -fsSL "$GPG_URL" | sudo gpg --dearmor -o $GPG_KEY_PATH

    else
      echo "> message:"
      echo "Sury Nginx mainline repo already installed "
    fi
  fi
  sudo apt update
  echo "> message:"
  echo "Installing php fpm and related packages"
  PHP_PACKAGES="-y php$PHP_VERSION php$PHP_VERSION-fpm php$PHP_VERSION-sqlite3 php$PHP_VERSION-mysql php$PHP_VERSION-xml php$PHP_VERSION-xmlrpc php$PHP_VERSION-curl php$PHP_VERSION-gd php$PHP_VERSION-imagick php$PHP_VERSION-cli php$PHP_VERSION-dev php$PHP_VERSION-imap php$PHP_VERSION-mbstring php$PHP_VERSION-opcache php$PHP_VERSION-soap php$PHP_VERSION-zip php$PHP_VERSION-intl php$PHP_VERSION-bcmath php$PHP_VERSION-bz2 php$PHP_VERSION-xdebug php$PHP_VERSION-ctype php$PHP_VERSION-gmp php$PHP_VERSION-bcmath php$PHP_VERSION-dev"
  if packages_installer "$PHP_PACKAGES"; then
    echo "> message:"
    echo "PHP INSTALLED WITH SUCCESS"
    echo "> message:"
    echo "Composer will be installed"
    if [ $show_confirmations -eq 1 ]; then
      confirmation_message
    else
      echo "> message:"
      echo "Confirmation avoided !"
    fi
    wget https://raw.githubusercontent.com/composer/getcomposer.org/76a7060ccb93902cd7576b67264ad91c8a2700e2/web/installer -O - -q | php -- --quiet
    sudo mv composer.phar /usr/local/bin/composer
    install_extra_packages_for_laravel_dev

  fi

    echo "> message:"
    echo "PHP INSTALL SCRIPT END"

}


#---------------NGINX INSTALL-------------------
install_nginx() {



  validate_sudo
  echo "> message:"
  echo "This script will uninstall current version of nginx if installed."
  echo "Also will install the sury nginx-mainline repo to work with sury php repositories"
  echo "Then, this script will install lastet version of nginx server "
  if [ $show_confirmations -eq 1 ]; then
    confirmation_message
  else
    echo "> message:"
    echo "Confirmation avoided !"
  fi 

  sudo systemctl stop nginx
  sudo apt-get -y autoremove nginx*

  echo "> message:"
  echo "Some packages are needed in order to repository manipulation (install or detected sury mainline nginx  repositories also for nginx installation)."
  install_deb_repo_packages
  validate_distro_name "Ubuntu" "Debian"

  if [[ $CURRENT_DISTRO_NAME == Ubuntu ]]; then

    PPA_UBUNTU_REPO="ondrej/nginx-mainline"
    validate_installed_repo $PPA_UBUNTU_REPO
    if ! validate_installed_repo $PPA_UBUNTU_REPO ; then
      echo "> message:"
      echo "The $PPA_UBUNTU_REPO repository was not detected in this os."
      echo "Adding $PPA_UBUNTU_REPO ppa repository"
      sudo add-apt-repository -y ppa:$PPA_UBUNTU_REPO
    else
      echo "> message:"
      echo "The $PPA_UBUNTU_REPO repository is already installed."

    fi
  fi
  if [[ $CURRENT_DISTRO_NAME == Debian ]]; then

    DEBIAN_REPO="https://packages.sury.org/nginx-mainline/ $(lsb_release -sc) main"
    
    if ! validate_installed_repo "$DEBIAN_REPO"; then
      echo "> message:"
      echo "Adding the $DEBIAN_REPO repository"

      GPG_URL=https://packages.sury.org/nginx-mainline/apt.gpg
      GPG_KEY_PATH="/etc/apt/trusted.gpg.d/sury-nginx-mainline-keyring.gpg"
      UNSIGNED_REPO="deb $DEBIAN_REPO "

      echo "$UNSIGNED_REPO" | sudo tee /etc/apt/sources.list.d/nginx-mainline.list

      curl -fsSL $GPG_URL | sudo gpg --dearmor -o $GPG_KEY_PATH

    else
      echo "> message:"
      echo "sury Nginx mainline repo already installed "
    fi

  fi

  echo "> message:"
  echo "Installing nginx and related packages"
  sudo apt update
  packages_installer nginx-core nginx-common nginx nginx-full -y

}


#---------------MARIADB INSTALL-------------------
install_mariadb() {
  validate_sudo

  echo "> message:"
  echo "If Official repositories for Mariadb 10.6 are not set, this script will add it, after it will install Mariadb 10.6 in this machine"
  if [ $show_confirmations -eq 1 ]; then
    confirmation_message
  else
    echo "> message:"
    echo "Confirmation avoided !"
  fi 

  validate_distro_name "Ubuntu" "Debian"

  BASE_MARIADB_REPO_URL="https://mirror.rackspace.com/mariadb/repo/10.6/${CURRENT_DISTRO_NAME,,}"

  echo "> message:"
  echo "Some packages are needed in order to repository manipulation (install or detected mariadb official repositories also for maria db installation)."

  install_deb_repo_packages

  

  if ! validate_installed_repo "$BASE_MARIADB_REPO_URL"; then
    echo ""
    echo "> message:"
    echo "Official MariaDB repositories where NOT found..."

    MARIA_DB_REPO=""
    if [[ $CURRENT_DISTRO_NAME == Ubuntu ]]; then
      #echo "FOR UBUNTU"
      validate_distro_version focal jammy
      MARIA_DB_REPO="deb $BASE_MARIADB_REPO_URL $CURRENT_DISTRO_VERSION main"
      #echo "$MARIA_DB_REPO"
    fi
    if [[ $CURRENT_DISTRO_NAME == Debian ]]; then
      #echo "FOR DEBIAN"
      validate_distro_version stretch buster bullseye
      MARIA_DB_REPO="deb $BASE_MARIADB_REPO_URL $CURRENT_DISTRO_VERSION main"
      #echo "$MARIA_DB_REPO"
    fi
    echo "> message:"
    echo "Adding repository gpg key..."
    sudo curl -o /etc/apt/trusted.gpg.d/mariadb_release_signing_key.asc 'https://mariadb.org/mariadb_release_signing_key.asc'
    echo "> message:"
    echo "Adding the repository to sources list: $MARIA_DB_REPO "
    sudo sh -c "echo '$MARIA_DB_REPO' >>/etc/apt/sources.list"
    echo ""
  else
    echo ""
    echo "> message:"
    echo "Official MariaDB repository where found..."
  fi
  echo ""
  echo "> message:"
  echo "Continue with maria db package install"
  sudo apt update
  packages_installer -y mariadb-server-10.6

}


#---------------FPM CREATE-------------------
fpm_create() {

  validate_sudo
  validate_envsubst
  validate_php

  if [ -z "$1" ]; then
    echo "This script needs a user as param"
    echo "Please run with a username as param"
    echo "Usage example:  "
    echo "    $ ./lemptool -fpm=myusername"
    exit 1
  fi

  FPM_DESIRED_USERNAME="$1"

  for (( ; ; )); do

    if [ "$FPM_DESIRED_USERNAME" = "root" ]; then
      echo "Due to potencial security issues this script will not create a fpm pool to run as root user"
      FPM_DESIRED_USERNAME=" root-user "
    fi
    if [ -z $FPM_DESIRED_USERNAME ]; then
      echo "Please type a valid OS user name, for a php fpm to run as:"
      read -r FPM_DESIRED_USERNAME
      echo ""
      continue
    fi

    if id "$FPM_DESIRED_USERNAME" >/dev/null 2>&1; then
      break
    else
      echo ""
      echo ""
      echo "User $FPM_DESIRED_USERNAME dose not exists in os."
      echo "A new user $FPM_DESIRED_USERNAME can be created."

      if [ $show_confirmations -eq 1 ]; then
        if not_exiting_confirmation_message; then
          if adduser -q "$FPM_DESIRED_USERNAME"; then
            echo "New user $FPM_DESIRED_USERNAME added"
            continue
          fi
        fi
      else
        echo "> message:"
        echo "Confirmation avoided !"
        if adduser -q "$FPM_DESIRED_USERNAME"; then
          echo "New user $FPM_DESIRED_USERNAME added"
          continue
        fi
      fi

    fi
    echo "Please type a valid OS user name, for a php fpm to run as:"
    read -r FPM_DESIRED_USERNAME
    echo ""
  done


  CURRENT_PHP_VERSION=$(php_version_number)
  PHP_CONFIG_PATH=$(php_config_path)
  FPM_USER=$FPM_DESIRED_USERNAME
  FPM_POOL_FILE="$PHP_CONFIG_PATH/fpm/pool.d/$FPM_USER.conf"
  export DOLLAR="$"
  export PERCENT="%"
  export FPM_USER

  if [  -f "$FPM_POOL_FILE" ]; then
    echo "FPM pool file $FPM_POOL_FILE already exists, if you continue it will  be overwritten"
    if [ $show_confirmations -eq 1 ]; then
      confirmation_message
    else
      echo "> message:"
      echo "Confirmation avoided !"
    fi
    rm -f "$FPM_POOL_FILE"
  fi


  if !  envsubst < "templates/fpm_create/pool_template" > "$FPM_POOL_FILE"; then
    echo "Error on php fpm pool creation"
    exit 1
  fi

  if ! systemctl restart php"$CURRENT_PHP_VERSION"-fpm; then
    echo "The php fpm service is not starting"
    exit 1
  fi

  echo "php fpm pool successfully created"
  echo "End of Fpm Pool Creation  script"

}



#---------------FPM NG CREATE -------------------
fpm_ng_server_create(){

  validate_sudo
  validate_envsubst
  validate_php
  validate_nginx

  NG_SERVER_PATH=$3
  NG_SERVER_DOMAIN=$2
  NG_SERVER_FPM_NAME=$1



  if [ -z "$NG_SERVER_DOMAIN" ]; then
    echo "This script needs a domain to configure nginx sever"
    echo "Please type a domainr"
    read -r NG_SERVER_DOMAIN
  fi

  if [ -z "$NG_SERVER_PATH" ]; then
    echo "This script needs a path to serve with a nginx server"
    echo "Please type a path to serve with a nginx server"
    read -r NG_SERVER_PATH
  fi
  if [ ! -d "$NG_SERVER_PATH" ];then
      echo "$NG_SERVER_PATH directory does not exist."
      exit 1
  fi

  CURRENT_PHP_VERSION=$(php_version_number)
  CURRENT_PHP_CONFIG_PATH=$(php_config_path)



  if [ -z "$NG_SERVER_FPM_NAME" ]; then
    echo "This script needs a valid fpm name to configure with"
    echo "Please type a fpm name"
    read -r $NG_SERVER_FPM_NAME
  fi




  FPM_POOL_FILE="$CURRENT_PHP_CONFIG_PATH/fpm/pool.d/$NG_SERVER_FPM_NAME.conf"

  if [ ! -f "$FPM_POOL_FILE" ]; then
    echo "> message:"
    echo "Fpm pool file $FPM_POOL_FILE does not exist"
    echo "A new fpm user and file can be created"
    if [ $show_confirmations -eq 1 ]; then
      confirmation_message
      fpm_create $NG_SERVER_FPM_NAME
    else
      echo "> message:"
      echo "Confirmation avoided !"
      fpm_create $NG_SERVER_FPM_NAME -y
    fi

  fi

  if ! systemctl restart php$CURRENT_PHP_VERSION-fpm; then
    echo "Error on php fpm restart"
    exit 1
  fi

  export DOLLAR="$"
  export PERCENT="%"
  export NG_SERVER_PATH
  export NG_SERVER_DOMAIN
  export NG_SERVER_FPM_NAME

  AVAILABLE_SERVERS_PATH="/etc/nginx/sites-available"
  ENABLED_SERVERS_PATH="/etc/nginx/sites-enabled"
  CURRENT_SERVER_FILE="$AVAILABLE_SERVERS_PATH/$NG_SERVER_DOMAIN"


  if [  -f "$CURRENT_SERVER_FILE" ]; then
    echo "Nginx server file $CURRENT_SERVER_FILE already exists, if you continue it will  be overwritten"
    if [ $show_confirmations -eq 1 ]; then
      confirmation_message
    else
      echo "> message:"
      echo "Confirmation avoided !"
    fi
    rm -f "$CURRENT_SERVER_FILE"
  fi


  if !  envsubst < "templates/laravel/nginx/server/server_unit_template" > "$CURRENT_SERVER_FILE"; then
    echo "Error on nginx server unit file creation"
    exit 1
  fi


  ln -s "$CURRENT_SERVER_FILE" "$ENABLED_SERVERS_PATH/$NG_SERVER_DOMAIN";

  if ! nginx -t; then
    echo "Error on nginx server unit content"
    exit 1
  fi

  if ! systemctl restart nginx; then
    echo "Error on nginx restart"
    exit 1
  fi

  echo "Nginx server successfully created"

}


#---------------LEMP CREATE-------------------
lemp_create(){

  validate_sudo
  validate_php
  validate_nginx
  validate_mariadb

  LEMP_USER=$1
  LEMP_DOMAIN=$2
  LEMP_DBUSER_PASSWORD=$3
  LEMP_PATH=$4



  if [ -z "$LEMP_DBUSER_PASSWORD" ]; then
    echo "The password for db user param is mandatory"
    echo "look for help with --help"
    echo '$ ./lemptool lemp="username" "domain" "dbpassword"'
    exit 1
  fi

  if [ -z "$LEMP_DOMAIN" ]; then
    echo "The domain param is mandatory"
    echo "look for help with --help"
    echo '$ ./lemptool lemp="username" "domain" "dbpassword"'
    exit 1
  fi

  if [ -z "$LEMP_USER" ]; then
    echo "The os user param is mandatory"
    echo "look for help with --help"
    echo '$ ./lemptool lemp="username" "domain" "dbpassword"'
    exit 1
  fi

  if ! id "$LEMP_USER" >/dev/null 2>&1; then
   echo "User $LEMP_USER does not exist"
   echo "Please use a valid os user"
   exit 1
  fi

  DEFAULT_LEMP_PATH="/var/www/$LEMP_USER/$LEMP_DOMAIN"
  if [ -z "$LEMP_PATH" ] || [ ! -d "$LEMP_PATH" ] ; then
    echo "> message:"
    echo "The path "$LEMP_PATH" is empty or does not exist"
    echo "this script can continue the lemp creation with a default path:"
    echo "$DEFAULT_LEMP_PATH"
    if [ $show_confirmations -eq 1 ]; then
      confirmation_message
    else
      echo "> message:"
      echo "Confirmation avoided !"
    fi
    LEMP_PATH=$DEFAULT_LEMP_PATH
    if [ ! -d "$LEMP_PATH" ]; then
      mkdir -p "$LEMP_PATH"
    fi
  fi


  str="$LEMP_DOMAIN"
  str="${str//./_}"
  oldstr="-"
  newstr="_"
  LEMP_DOMAIN_ESCAPED=$(echo $str | sed "s/$oldstr/$newstr/g")



  chown -R "$LEMP_USER":"$LEMP_USER" "$LEMP_PATH"
  ln -s "$LEMP_PATH" "/home/$LEMP_USER/$LEMP_DOMAIN"

  CURRENT_PHP_VERSION=$(php_version_number)
  PHP_CONFIG_PATH=$(php_config_path)
  FPM_POOL_FILE="$PHP_CONFIG_PATH/fpm/pool.d/$LEMP_USER.conf"


  if [ ! -f "$FPM_POOL_FILE" ]; then
    echo "> message:"
    echo "Fpm pool file $FPM_POOL_FILE does not exist"
    echo "A new fpm file can be created for $LEMP_USER"
    if [ $show_confirmations -eq 1 ]; then
      confirmation_message
    else
      echo "> message:"
      echo "Confirmation avoided !"
    fi

    if ! fpm_create $LEMP_USER ; then
      echo "> error:"
      echo "FPM cant be created"
      exit 1
    fi
  fi

  if ! add_mdb_user_with_db $LEMP_DOMAIN_ESCAPED $LEMP_DBUSER_PASSWORD; then
    echo "> error:"
    echo "Error on  user or db creation using: $LEMP_DOMAIN_ESCAPED name"
    echo "Do you wish to continue the lemp creation without the database?"
    if [ $show_confirmations -eq 1 ]; then
      confirmation_message
    else
      echo "> message:"
      echo "Confirmation avoided !, continue without database"
    fi
  fi

  if  ! fpm_ng_server_create $LEMP_USER $LEMP_DOMAIN $LEMP_PATH; then
    rm -f "/home/$LEMP_USER/$LEMP_DOMAIN"
    echo "> error:"
    echo "Error on lemp creation"
    exit 1
  fi

  export CURRENT_PHP_VERSION
  export LEMP_USER
  export LEMP_PATH
  export LEMP_DOMAIN
  export LEMP_DOMAIN_ESCAPED

  if !  envsubst < "templates/lemp/index.php.template" > "$LEMP_PATH/index.php"; then
    echo "> error:"
    echo "index.php template creation"
  fi




  chown -R "$LEMP_USER":"$LEMP_USER" "$LEMP_PATH"
  echo ""
  echo ""
  echo "Lemp successfully created with:";
  echo "User: $LEMP_USER";
  echo "Domain: $LEMP_DOMAIN"
  echo "DB and User: $LEMP_DOMAIN_ESCAPED"
  echo "DB USER PASS: $LEMP_DBUSER_PASSWORD"


}

#---------------DB USER CREATE-------------------
add_mdb_user(){
  validate_sudo
  validate_mariadb
  MDB_USERNAME=""
  MDB_PASSWORD=""

  if [ -z "$1" ]; then
    echo "Please type the username to add"
    read -r MDB_USERNAME
  else
    MDB_USERNAME="$1"
  fi
  if [ -z "$2" ]; then
    echo "Please type the password for $MDB_USERNAME"
    read -r MDB_PASSWORD
  else
    MDB_PASSWORD="$2"
  fi
  MDB_HOST="%"
  if [ -n "$3" ]; then
    MDB_HOST="$3"
  else
    echo "A hostname for this new user:  $MDB_USERNAME  was not provided"
    echo "User will be created with % as host."
    if [ $show_confirmations -eq 1 ]; then
      confirmation_message
    else
      echo "> message:"
      echo "Confirmation avoided !"
    fi
  fi

  CREATE_USER_QUERY="CREATE USER IF NOT EXISTS '$MDB_USERNAME'@'$MDB_HOST' IDENTIFIED BY '$MDB_PASSWORD';"
  if echo "$CREATE_USER_QUERY" | mysql ; then
    echo "User $MDB_USERNAME @ $MDB_HOST created "
    return 0
  else
    echo "Error creating user $MDB_USERNAME"
    return 1
  fi
}
add_mdb_superuser(){
  if ! add_mdb_user "$@" ;then
    echo "Super user can not be created"
    exit 1
  fi

  CREATE_USER_QUERY="GRANT ALL PRIVILEGES ON *.* TO '$MDB_USERNAME'@'$MDB_HOST' REQUIRE NONE WITH GRANT OPTION MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0;FLUSH PRIVILEGES;"
  if echo "$CREATE_USER_QUERY" | mysql ; then
    echo "User $MDB_USERNAME @ $MDB_HOST is now SUPER USER "
    return 0
  else
    echo "ERROR on giving all privileges to  $MDB_USERNAME @ $MDB_HOST "
    return 1
  fi
}
add_mdb_user_with_db(){
  if ! add_mdb_user "$@" ;then
    echo "User can not be created"
    exit 1
  fi

  CREATE_USER_QUERY="GRANT USAGE ON *.* TO '$MDB_USERNAME'@'$MDB_HOST' REQUIRE NONE WITH MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0 MAX_USER_CONNECTIONS 0;CREATE DATABASE IF NOT EXISTS \`$MDB_USERNAME\`; GRANT ALL PRIVILEGES ON \`$MDB_USERNAME\`.* TO '$MDB_USERNAME'@'$MDB_HOST'; "
  if echo "$CREATE_USER_QUERY" | mysql ; then
    echo "User $MDB_USERNAME @ $MDB_HOST created with a database named $MDB_USERNAME"
    return 0
  else
    echo "Error creating user $MDB_USERNAME db "
    return 1
  fi
}
#---------------PHPMYADMIN INSTALL -------------------
install_phpmyadmin() {
  validate_sudo
  echo ""
  validate_php
  validate_mariadb
  validate_nginx
  echo ""
  if ! which "envsubst"; then
    echo ""
    echo "envsubst command not found"
    echo "Please install  gettext-base package"

    exit 1
  fi

  PHPMYADMIN_VERSION="5.2.0"
  PHPMYADMIN_USERNAME="phpmyadmin"
  echo "This script will install install phpMyAdmin $PHPMYADMIN_VERSION."
  echo "Also this script will create a phpmyadmin user if not exists, add a new phpmyadmin fpm for the phpmyadmin created user, later it will create a phpmyadmin nginx server."
  confirmation_message
  PHPMYADMIN_DOWNLOAD_URL="https://files.phpmyadmin.net/phpMyAdmin/$PHPMYADMIN_VERSION/phpMyAdmin-$PHPMYADMIN_VERSION-all-languages.zip"
  PHPMYADMIN_USER_PATH="/home/$PHPMYADMIN_USERNAME"
  PHPMYADMIN_DOWNLOAD_PATH="$PHPMYADMIN_USER_PATH/phpmyadmin.zip"
  PHPMYADMIN_EXTRACTION_PATH="$PHPMYADMIN_USER_PATH/phpMyAdmin-$PHPMYADMIN_VERSION-all-languages"
  PHPMYADMIN_PUBLIC_PATH="/opt/$PHPMYADMIN_USERNAME"
  packages_installer unzip zip
  echo ""
  echo "$PHPMYADMIN_USERNAME user is needed"
  sudo adduser -q $PHPMYADMIN_USERNAME
  sudo curl -o $PHPMYADMIN_DOWNLOAD_PATH $PHPMYADMIN_DOWNLOAD_URL
  sudo unzip -o $PHPMYADMIN_DOWNLOAD_PATH -d $PHPMYADMIN_USER_PATH
  if [ -d $PHPMYADMIN_PUBLIC_PATH ]; then
    echo "$PHPMYADMIN_PUBLIC_PATH already exists"
    echo "If you continue it will be overwritten with the new instalation content"
    confirmation_message
    echo " deleting $PHPMYADMIN_PUBLIC_PATH"
    rm -r $PHPMYADMIN_PUBLIC_PATH
  fi

  sudo mv $PHPMYADMIN_EXTRACTION_PATH $PHPMYADMIN_PUBLIC_PATH
  cp "templates/phpmyadmin/config.inc.php" "$PHPMYADMIN_PUBLIC_PATH/config.inc.php"
  sudo chown -R phpmyadmin $PHPMYADMIN_PUBLIC_PATH

  fpm_create "$PHPMYADMIN_USERNAME"

  echo "A domain for phpmyadmin nginx server is needed."
  echo ""
  echo "A nginx server unit file will be created using $PHPMYADMIN_USERNAME subdomain,"
  echo "if your domain is 'yourdomain.com' the phpmyadmin 'server_name' directive"
  echo "of your nginx server unit file will point to $PHPMYADMIN_USERNAME.yourdomain.com."
  echo ""

  for (( ; ; )); do
    echo "This script needs a root domain name to prepend the 'phpmyadmin' subdomain."
    echo "Example: for phpmyadmin.some-root-domain.com,  'some-root-domain.com' is needed."
    echo "Please type the root domain name that your phpmyadmin installation will use:"
    read -r PHPMYADMIN_DOMAIN
    echo ""
    echo "Are you sure the domain to use is $PHPMYADMIN_DOMAIN ? [Y/n] "
    read -r SURE_OF_DOMAIN
    if [[ $SURE_OF_DOMAIN = "Y" ]]; then
      break
    fi
  done

  export PHPMYADMIN_DOMAIN="$PHPMYADMIN_USERNAME.$PHPMYADMIN_DOMAIN"
  export PHPMYADMIN_PUBLIC_PATH
  export DOLLAR="$"
  NGINX_AVAILABLE_SERVERS_PATH="/etc/nginx/sites-available"
  NGINX_ENABLED_SERVERS_PATH="/etc/nginx/sites-enabled"

  PHPMYADMIN_SERVER_UNIT_FILE="$NGINX_AVAILABLE_SERVERS_PATH/$PHPMYADMIN_DOMAIN"
  PHPMYADMIN_SERVER_UNIT_SOFT_LINK_PATH="$NGINX_ENABLED_SERVERS_PATH/$PHPMYADMIN_DOMAIN"

  cat "templates/phpmyadmin/nginx/server_template" | envsubst >"$PHPMYADMIN_SERVER_UNIT_FILE"

  if [ -f "$PHPMYADMIN_SERVER_UNIT_SOFT_LINK_PATH" ]; then
    echo "The $PHPMYADMIN_SERVER_UNIT_SOFT_LINK_PATH soft link already exist"
    echo "It must be overwritten."
    echo "Update the $PHPMYADMIN_SERVER_UNIT_SOFT_LINK_PATH soft link ?"
    confirmation_message
    rm -f "$PHPMYADMIN_SERVER_UNIT_SOFT_LINK_PATH"
  fi
  ln -s "$PHPMYADMIN_SERVER_UNIT_FILE" "$PHPMYADMIN_SERVER_UNIT_SOFT_LINK_PATH"

  if ! nginx -t; then
    echo ""
    echo "Error in some of your sever uinits"
    echo "Please correct it and run the command again"
    exit 1
  fi

  echo "Restarting nginx service"
  if ! systemctl restart nginx; then
    echo "It was not possible to restart nginx service"
    exit 1
  fi
  echo "Nginx Service restarted !"
  echo "Bash phpmyadmin installation script end"

}
